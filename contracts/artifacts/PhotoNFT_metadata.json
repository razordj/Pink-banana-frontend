{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_nftName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_nftSymbol",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_tokenURI",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "photoPrice",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "approved",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "ApprovalForAll",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "currentPhotoId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getApproved",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					}
				],
				"name": "isApprovedForAll",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "safeTransferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "approved",
						"type": "bool"
					}
				],
				"name": "setApprovalForAll",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "tokenOfOwnerByIndex",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "tokenURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"approve(address,uint256)": {
					"details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
					"params": {
						"to": "address to be approved for the given token ID",
						"tokenId": "uint256 ID of the token to be approved"
					}
				},
				"balanceOf(address)": {
					"details": "Gets the balance of the specified address",
					"params": {
						"owner": "address to query the balance of"
					},
					"return": "uint256 representing the amount owned by the passed address"
				},
				"getApproved(uint256)": {
					"details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
					"params": {
						"tokenId": "uint256 ID of the token to query the approval of"
					},
					"return": "address currently approved for the given token ID"
				},
				"isApprovedForAll(address,address)": {
					"details": "Tells whether an operator is approved by a given owner",
					"params": {
						"operator": "operator address which you want to query the approval of",
						"owner": "owner address which you want to query the approval of"
					},
					"return": "bool whether the given operator is approved by the given owner"
				},
				"mint(address,string)": {
					"details": "mint a photoNFTtokenURI - URL include ipfs hash"
				},
				"name()": {
					"details": "Gets the token name",
					"return": "string representing the token name"
				},
				"ownerOf(uint256)": {
					"details": "Gets the owner of the specified token ID",
					"params": {
						"tokenId": "uint256 ID of the token to query the owner of"
					},
					"return": "owner address currently marked as the owner of the given token ID"
				},
				"safeTransferFrom(address,address,uint256)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"safeTransferFrom(address,address,uint256,bytes)": {
					"details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"_data": "bytes data to send along with a safe transfer check",
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				},
				"setApprovalForAll(address,bool)": {
					"details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
					"params": {
						"approved": "representing the status of the approval to be set",
						"to": "operator address to set the approval"
					}
				},
				"supportsInterface(bytes4)": {
					"details": "implement supportsInterface(bytes4) using a lookup table"
				},
				"symbol()": {
					"details": "Gets the token symbol",
					"return": "string representing the token symbol"
				},
				"tokenByIndex(uint256)": {
					"details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
					"params": {
						"index": "uint256 representing the index to be accessed of the tokens list"
					},
					"return": "uint256 token ID at the given index of the tokens list"
				},
				"tokenOfOwnerByIndex(address,uint256)": {
					"details": "Gets the token ID at a given index of the tokens list of the requested owner",
					"params": {
						"index": "uint256 representing the index to be accessed of the requested tokens list",
						"owner": "address owning the tokens list to be accessed"
					},
					"return": "uint256 token ID at the given index of the tokens list owned by the requested address"
				},
				"tokenURI(uint256)": {
					"details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
					"params": {
						"tokenId": "uint256 ID of the token to query"
					}
				},
				"totalSupply()": {
					"details": "Gets the total amount of tokens stored by the contract",
					"return": "uint256 representing the total amount of tokens"
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
					"params": {
						"from": "current owner of the token",
						"to": "address to receive the ownership of the given token ID",
						"tokenId": "uint256 ID of the token to be transferred"
					}
				}
			}
		},
		"userdoc": {
			"methods": {},
			"notice": "- This is the NFT contract for a photo"
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PhotoNFT.sol": "PhotoNFT"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/PhotoNFT.sol": {
			"keccak256": "0x38a5ac7b82e0484c1ee31f52d31e495573b202d4db4ac519fe8472e25892596f",
			"urls": [
				"bzz-raw://e7bed2c3e379deec1aeb70e05ca7c702b2136c9608050d6cf4184294437dd613",
				"dweb:/ipfs/QmNqHM2HvAtPydWBZK5mg2GLHq7MzBZRP3Sdn8bANJ7CLE"
			]
		},
		"contracts/openzeppelin-solidity/contracts/introspection/ERC165.sol": {
			"keccak256": "0x9da23588f58d0fa67097984e151bdaa6aa69c5e192bae17b44a90b0cfc194736",
			"urls": [
				"bzz-raw://5e88c7dbb4d1e6d3f133112b9994491b8531f5d9103cf41becd1c267d2cd67af",
				"dweb:/ipfs/QmNuSmDBgv616hXRshbHx48ufdZoSrcFHpwqP4iPg2ac4X"
			]
		},
		"contracts/openzeppelin-solidity/contracts/introspection/IERC165.sol": {
			"keccak256": "0xbbb6159006ae3639daea09f7d63987816d6cf3a99f52af919363e025d3abf3b8",
			"urls": [
				"bzz-raw://35e7d742ee71461779df12a0ab1ad4701144d98eb6401182838c8daf40b008dd",
				"dweb:/ipfs/QmY4t7pxcX2cfk6VsGJWZLBgoKMpRctY8X1HPxykLjptSi"
			]
		},
		"contracts/openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b",
			"urls": [
				"bzz-raw://1eb493553b27efd46c231a836a83ce50d215639feb97b4aac9f301d0fd034ff5",
				"dweb:/ipfs/QmbMdvSXcqGKxeeYvzF3VrWpoHQyVzMXBhzhAokF2Gdymv"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x0546fa662082b36ac9cbd418c0722a3c52718b9dc3fe3e284081d73f48036228",
			"urls": [
				"bzz-raw://a50dd4c1c7afa4ade53ee47bc782eaad72a45091ed9756081616b33eb6c150c4",
				"dweb:/ipfs/Qmb88e4EnSbJv2BbayFg6wZpFMJ9aPF7r4cwMjnZkUu4VK"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol": {
			"keccak256": "0x6c1899ddf6ca192150b58ce0ad2a890d981282a3ec2620700fa1c9a381b79ba0",
			"urls": [
				"bzz-raw://d898fb28a61ef52f03fcc3be772b09aeb4c88ebe6e57b79d7275da94758d6afa",
				"dweb:/ipfs/QmRFuDxB532sYwB8JXq5LdHLAfGigcAHMvh4T4TBVrHPwK"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol": {
			"keccak256": "0x21b8368e133ed2ee80f5feb602ff6bad7e3b9110b1ae90ea0faabf9c00527224",
			"urls": [
				"bzz-raw://ac1f35c6b92a163e16498daa3d471bfd218fad71f8067ae357950ddd31add718",
				"dweb:/ipfs/QmPk2WQbNXPW1jnnpDZXVxhgXATBU6fGwYFejWi21oL94M"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol": {
			"keccak256": "0xb8deb41bb234969070dc362c144191f2781178c33cf6b434fd68aa3692834105",
			"urls": [
				"bzz-raw://83ef717ae1d047085d6ce2d63ed987c3282ba22190c09fa75f52346af2ac67bb",
				"dweb:/ipfs/QmQqQJor8zVE9kvYiCZscmerKrdLGgiELrn199zQEm7kZp"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x1f059ee943273719130df645fa38069b792988e8b732585528d5b1265f5aa046",
			"urls": [
				"bzz-raw://31e4d99091a83a42a6ea14d74ceae2ec3ffb2905c7ee07358875af72ea188333",
				"dweb:/ipfs/Qmf7nHc6BwhbyawapCVRZHzhBHNoA8ftpQWmGSyToVKVzN"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol": {
			"keccak256": "0x1cded69b7f4e17fe634fecbf2bf43320beb11a95ba924c3665a11fc8f47dffc4",
			"urls": [
				"bzz-raw://013a7b38cce9bf8d10af9ec8b5e09be1ea6645da2e1958bf6ed8a875942ac6d6",
				"dweb:/ipfs/Qme9TC1YrXMpNHFoM8GHRjWtRWJ1LxRcYJCPSfoqY4yYri"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol": {
			"keccak256": "0xa0bb72e035727b0631aac6380e899ad48511073a3d67f1da528f845d4a3121fb",
			"urls": [
				"bzz-raw://aa3f398156da37e868c7d22967457a70aa840097c7d532b0155208a0d2dbf63f",
				"dweb:/ipfs/QmUfBdHdyzY5FzhZPC46RDsqJfaqT9oLhsknP92pYqtM2g"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x5e7281dbd14cf07af0974ce830c6242062cd430b70658878d49b5f5c1e2ec0aa",
			"urls": [
				"bzz-raw://3c9374b456bf5fde2c473331ff75bed9c6be3634948ba6a6507e4c19c2abf605",
				"dweb:/ipfs/QmUm5NKd1ToSr8MHVVanQv3XEkQpmYKw2441KXYyXPE6np"
			]
		},
		"contracts/openzeppelin-solidity/contracts/utils/Address.sol": {
			"keccak256": "0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34",
			"urls": [
				"bzz-raw://a3c2d9f046beebab7fb41b1b124a6a124a36f510f7c67365861402ac831bdc71",
				"dweb:/ipfs/QmUtASRgitregbKH83anopLtF9vFQe3BKeAjhUa6F7t9YV"
			]
		}
	},
	"version": 1
}