{
	"compiler": {
		"version": "0.5.16+commit.9c3226ce"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract PhotoNFTData",
						"name": "_photoNFTData",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "contract PhotoNFT",
						"name": "photoNFT",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "photoId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "ownerBeforeOwnershipTransferred",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "ownerAfterOwnershipTransferred",
						"type": "address"
					}
				],
				"name": "PhotoNFTOwnershipChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "ad",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "status",
						"type": "bytes32"
					}
				],
				"name": "TradeStatusChange",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "PHOTO_NFT_MARKETPLACE",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "_photoNFT",
						"type": "address"
					}
				],
				"name": "buyPhotoNFT",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "photoNFT",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_photoId",
						"type": "uint256"
					}
				],
				"name": "cancelTrade",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "uint256",
						"name": "photoId",
						"type": "uint256"
					}
				],
				"name": "getReputationCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "photoNFT",
						"type": "address"
					}
				],
				"name": "getTrade",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "photoId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "photoPrice",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "status",
								"type": "bytes32"
							}
						],
						"internalType": "struct PhotoNFTTradable.Trade",
						"name": "trade_",
						"type": "tuple"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "photoNFT",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_photoId",
						"type": "uint256"
					}
				],
				"name": "openTrade",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "photoNFT",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_photoId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_photoPrice",
						"type": "uint256"
					}
				],
				"name": "openTradeWhenCreateNewPhotoNFT",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "photoNFTData",
				"outputs": [
					{
						"internalType": "contract PhotoNFTData",
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "photoId",
						"type": "uint256"
					}
				],
				"name": "reputation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "trades",
				"outputs": [
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "photoId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "photoPrice",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "status",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "contract PhotoNFT",
						"name": "_photoNFT",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_photoId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_buyer",
						"type": "address"
					}
				],
				"name": "transferOwnershipOfPhotoNFT",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"cancelTrade(address,uint256)": {
					"details": "Cancels a trade by the seller."
				},
				"getTrade(address)": {
					"details": "- Returns the details for a trade."
				},
				"openTrade(address,uint256)": {
					"details": "Opens a trade by the seller."
				},
				"openTradeWhenCreateNewPhotoNFT(address,uint256,uint256)": {
					"details": "Opens a new trade. Puts _photoId in escrow.",
					"params": {
						"_photoId": "The id for the photoId to trade.",
						"_photoPrice": "The amount of currency for which to trade the photoId."
					}
				},
				"reputation(address,address,uint256)": {
					"details": "reputation function is that gives reputation to a user who has ownership of being posted photo.Each user has reputation data in struct"
				},
				"transferOwnershipOfPhotoNFT(address,uint256,address)": {
					"details": "Executes a trade. Must have approved this contract to transfer the amount of currency specified to the seller. Transfers ownership of the photoId to the filler."
				}
			}
		},
		"userdoc": {
			"methods": {
				"buyPhotoNFT(address)": {
					"notice": "- Buy function is that buy NFT token and ownership transfer. (Reference from IERC721.sol)- msg.sender buy NFT with ETH (msg.value)- PhotoID is always 1. Because each photoNFT is unique."
				},
				"openTradeWhenCreateNewPhotoNFT(address,uint256,uint256)": {
					"notice": "- This method is only executed when a seller create a new PhotoNFT"
				}
			}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PhotoNFTMarketPlace.sol": "PhotoNFTMarketplace"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/PhotoNFT.sol": {
			"keccak256": "0x38a5ac7b82e0484c1ee31f52d31e495573b202d4db4ac519fe8472e25892596f",
			"urls": [
				"bzz-raw://e7bed2c3e379deec1aeb70e05ca7c702b2136c9608050d6cf4184294437dd613",
				"dweb:/ipfs/QmNqHM2HvAtPydWBZK5mg2GLHq7MzBZRP3Sdn8bANJ7CLE"
			]
		},
		"contracts/PhotoNFTData.sol": {
			"keccak256": "0x44ae1bc6942d865faec8ba96087728441c77baf006e7ce6b474729997820c941",
			"urls": [
				"bzz-raw://bc5734edd74c7343ead98f641c600bdc4d69ffdb19be5657f8df022b7e70fb6f",
				"dweb:/ipfs/QmYuJ9rjNDgzzaUaU99YxM8nsAmTpg9sfZqQSodDmcoace"
			]
		},
		"contracts/PhotoNFTMarketPlace.sol": {
			"keccak256": "0x530b5b749027c4349c29bf426695b1fe871bf3add5007783179e494ec11e5a51",
			"urls": [
				"bzz-raw://94f3678e6183b72ef4d1b8b2ae17ee1d35636a5f8e07f96132e4d4b6e4c217db",
				"dweb:/ipfs/QmX64RMYug1VzWkbQEjXWgoVfm5swEdWBP6jDthKxN2sDC"
			]
		},
		"contracts/PhotoNFTTradable.sol": {
			"keccak256": "0xfeb823eb4e8bf942992ee9ba6edfd75a14c77c67dc1412fa2b9fe9b217a3eb85",
			"urls": [
				"bzz-raw://d44199868e79914c566ed324efe28ca4b29a03be4b9c7b820372e29f674bc7ab",
				"dweb:/ipfs/QmPtppgfV3aZZk63KfJjwUxRH9Pf2pHRFY25vj6LmsPG6k"
			]
		},
		"contracts/openzeppelin-solidity/contracts/introspection/ERC165.sol": {
			"keccak256": "0x9da23588f58d0fa67097984e151bdaa6aa69c5e192bae17b44a90b0cfc194736",
			"urls": [
				"bzz-raw://5e88c7dbb4d1e6d3f133112b9994491b8531f5d9103cf41becd1c267d2cd67af",
				"dweb:/ipfs/QmNuSmDBgv616hXRshbHx48ufdZoSrcFHpwqP4iPg2ac4X"
			]
		},
		"contracts/openzeppelin-solidity/contracts/introspection/IERC165.sol": {
			"keccak256": "0xbbb6159006ae3639daea09f7d63987816d6cf3a99f52af919363e025d3abf3b8",
			"urls": [
				"bzz-raw://35e7d742ee71461779df12a0ab1ad4701144d98eb6401182838c8daf40b008dd",
				"dweb:/ipfs/QmY4t7pxcX2cfk6VsGJWZLBgoKMpRctY8X1HPxykLjptSi"
			]
		},
		"contracts/openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b",
			"urls": [
				"bzz-raw://1eb493553b27efd46c231a836a83ce50d215639feb97b4aac9f301d0fd034ff5",
				"dweb:/ipfs/QmbMdvSXcqGKxeeYvzF3VrWpoHQyVzMXBhzhAokF2Gdymv"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x0546fa662082b36ac9cbd418c0722a3c52718b9dc3fe3e284081d73f48036228",
			"urls": [
				"bzz-raw://a50dd4c1c7afa4ade53ee47bc782eaad72a45091ed9756081616b33eb6c150c4",
				"dweb:/ipfs/Qmb88e4EnSbJv2BbayFg6wZpFMJ9aPF7r4cwMjnZkUu4VK"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol": {
			"keccak256": "0x6c1899ddf6ca192150b58ce0ad2a890d981282a3ec2620700fa1c9a381b79ba0",
			"urls": [
				"bzz-raw://d898fb28a61ef52f03fcc3be772b09aeb4c88ebe6e57b79d7275da94758d6afa",
				"dweb:/ipfs/QmRFuDxB532sYwB8JXq5LdHLAfGigcAHMvh4T4TBVrHPwK"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol": {
			"keccak256": "0x21b8368e133ed2ee80f5feb602ff6bad7e3b9110b1ae90ea0faabf9c00527224",
			"urls": [
				"bzz-raw://ac1f35c6b92a163e16498daa3d471bfd218fad71f8067ae357950ddd31add718",
				"dweb:/ipfs/QmPk2WQbNXPW1jnnpDZXVxhgXATBU6fGwYFejWi21oL94M"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol": {
			"keccak256": "0xb8deb41bb234969070dc362c144191f2781178c33cf6b434fd68aa3692834105",
			"urls": [
				"bzz-raw://83ef717ae1d047085d6ce2d63ed987c3282ba22190c09fa75f52346af2ac67bb",
				"dweb:/ipfs/QmQqQJor8zVE9kvYiCZscmerKrdLGgiELrn199zQEm7kZp"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x1f059ee943273719130df645fa38069b792988e8b732585528d5b1265f5aa046",
			"urls": [
				"bzz-raw://31e4d99091a83a42a6ea14d74ceae2ec3ffb2905c7ee07358875af72ea188333",
				"dweb:/ipfs/Qmf7nHc6BwhbyawapCVRZHzhBHNoA8ftpQWmGSyToVKVzN"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol": {
			"keccak256": "0x1cded69b7f4e17fe634fecbf2bf43320beb11a95ba924c3665a11fc8f47dffc4",
			"urls": [
				"bzz-raw://013a7b38cce9bf8d10af9ec8b5e09be1ea6645da2e1958bf6ed8a875942ac6d6",
				"dweb:/ipfs/Qme9TC1YrXMpNHFoM8GHRjWtRWJ1LxRcYJCPSfoqY4yYri"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol": {
			"keccak256": "0xa0bb72e035727b0631aac6380e899ad48511073a3d67f1da528f845d4a3121fb",
			"urls": [
				"bzz-raw://aa3f398156da37e868c7d22967457a70aa840097c7d532b0155208a0d2dbf63f",
				"dweb:/ipfs/QmUfBdHdyzY5FzhZPC46RDsqJfaqT9oLhsknP92pYqtM2g"
			]
		},
		"contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x5e7281dbd14cf07af0974ce830c6242062cd430b70658878d49b5f5c1e2ec0aa",
			"urls": [
				"bzz-raw://3c9374b456bf5fde2c473331ff75bed9c6be3634948ba6a6507e4c19c2abf605",
				"dweb:/ipfs/QmUm5NKd1ToSr8MHVVanQv3XEkQpmYKw2441KXYyXPE6np"
			]
		},
		"contracts/openzeppelin-solidity/contracts/utils/Address.sol": {
			"keccak256": "0x5c731061b804fa256fc8c05150eafe5d20b6bb94541a8f187912bf84f7033f34",
			"urls": [
				"bzz-raw://a3c2d9f046beebab7fb41b1b124a6a124a36f510f7c67365861402ac831bdc71",
				"dweb:/ipfs/QmUtASRgitregbKH83anopLtF9vFQe3BKeAjhUa6F7t9YV"
			]
		},
		"contracts/photo-nft-data/commons/PhotoNFTDataObjects.sol": {
			"keccak256": "0x7fa62d2076e8f173cf623c06893b70677dcdcdec49c42fb6499506ec8612194c",
			"urls": [
				"bzz-raw://089cb392790a42ae5fcc4a805417afbea49b7e2e737770bb661b121f5fc9eb47",
				"dweb:/ipfs/QmfZeNU6MacUjU3j4EtsGqdN3Fe1wbjDPwTuo7zezHii4i"
			]
		},
		"contracts/photo-nft-data/commons/PhotoNFTDataStorages.sol": {
			"keccak256": "0xf014b4ff91479900314d2a27e9bd8bac0037175babf0a69f6393e45f8e0b7453",
			"urls": [
				"bzz-raw://b192caa5e660f2442f76b1ff2e1e51bfc3fd0baa7e88094affbc8a0358b339ab",
				"dweb:/ipfs/QmcKou6pv2YsVecuvnCSTVEuwMPTzBmkyUrnzX8oz3xAew"
			]
		},
		"contracts/photo-nft-marketplace/commons/PhotoNFTMarketplaceEvents.sol": {
			"keccak256": "0x6f34456d8192a7940bf85abe73d6b80451898f2bfa4da91f50ec158dd3ce5e08",
			"urls": [
				"bzz-raw://dbdddaa5c2720c324ed637b16b6f617301e771c69aa2af05981351c4e3275b55",
				"dweb:/ipfs/QmdkgZtmzsJDuBtM82op3gePRVKN5JtVcWLpfvRH2QgU7d"
			]
		}
	},
	"version": 1
}